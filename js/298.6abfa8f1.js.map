{"version":3,"file":"js/298.6abfa8f1.js","mappings":"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","sources":["webpack://DOUJI.AI/../src/Layout.ts","webpack://DOUJI.AI/./node_modules/base-x/src/index.js","webpack://DOUJI.AI/./node_modules/bigint-buffer/dist/browser.js","webpack://DOUJI.AI/./node_modules/borsh/lib/index.js","webpack://DOUJI.AI/./node_modules/bs58/index.js","webpack://DOUJI.AI/./node_modules/jayson/lib/client/browser/index.js","webpack://DOUJI.AI/./node_modules/jayson/lib/generateRequest.js","webpack://DOUJI.AI/./node_modules/rpc-websockets/dist/lib/client.js","webpack://DOUJI.AI/./node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/createClass.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/inherits.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/toPrimitive.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/toPropertyKey.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/helpers/typeof.js","webpack://DOUJI.AI/./node_modules/@babel/runtime/regenerator/index.js","webpack://DOUJI.AI/../src/_assert.ts","webpack://DOUJI.AI/../src/crypto.ts","webpack://DOUJI.AI/../src/utils.ts","webpack://DOUJI.AI/../src/_sha2.ts","webpack://DOUJI.AI/../src/_u64.ts","webpack://DOUJI.AI/../src/sha512.ts","webpack://DOUJI.AI/../../src/abstract/utils.ts","webpack://DOUJI.AI/../../src/abstract/modular.ts","webpack://DOUJI.AI/../../src/abstract/curve.ts","webpack://DOUJI.AI/../../src/abstract/edwards.ts","webpack://DOUJI.AI/../src/ed25519.ts","webpack://DOUJI.AI/../src/sha256.ts","webpack://DOUJI.AI/../src/error.ts","webpack://DOUJI.AI/../src/struct.ts","webpack://DOUJI.AI/../src/structs/utilities.ts","webpack://DOUJI.AI/../src/structs/types.ts","webpack://DOUJI.AI/../src/structs/coercions.ts","webpack://DOUJI.AI/../src/sha3.ts","webpack://DOUJI.AI/../src/hmac.ts","webpack://DOUJI.AI/../../src/abstract/weierstrass.ts","webpack://DOUJI.AI/../src/_shortw_utils.ts","webpack://DOUJI.AI/../src/secp256k1.ts","webpack://DOUJI.AI/../src/utils/ed25519.ts","webpack://DOUJI.AI/../src/utils/to-buffer.ts","webpack://DOUJI.AI/../src/utils/borsh-schema.ts","webpack://DOUJI.AI/../src/publickey.ts","webpack://DOUJI.AI/../src/bpf-loader-deprecated.ts","webpack://DOUJI.AI/../src/transaction/constants.ts","webpack://DOUJI.AI/../src/transaction/expiry-custom-errors.ts","webpack://DOUJI.AI/../src/message/account-keys.ts","webpack://DOUJI.AI/../src/layout.ts","webpack://DOUJI.AI/../src/utils/shortvec-encoding.ts","webpack://DOUJI.AI/../src/utils/assert.ts","webpack://DOUJI.AI/../src/message/compiled-keys.ts","webpack://DOUJI.AI/../src/message/legacy.ts","webpack://DOUJI.AI/../src/message/v0.ts","webpack://DOUJI.AI/../src/transaction/legacy.ts","webpack://DOUJI.AI/../src/timing.ts","webpack://DOUJI.AI/../src/sysvar.ts","webpack://DOUJI.AI/../src/utils/send-and-confirm-transaction.ts","webpack://DOUJI.AI/../src/utils/sleep.ts","webpack://DOUJI.AI/../src/instruction.ts","webpack://DOUJI.AI/../src/fee-calculator.ts","webpack://DOUJI.AI/../src/nonce-account.ts","webpack://DOUJI.AI/../src/utils/bigint.ts","webpack://DOUJI.AI/../src/programs/system.ts","webpack://DOUJI.AI/../src/loader.ts","webpack://DOUJI.AI/../src/bpf-loader.ts","webpack://DOUJI.AI/../../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","webpack://DOUJI.AI/../src/epoch-schedule.ts","webpack://DOUJI.AI/../src/errors.ts","webpack://DOUJI.AI/../src/__forks__/browser/fetch-impl.ts","webpack://DOUJI.AI/../src/rpc-websocket.ts","webpack://DOUJI.AI/../src/account-data.ts","webpack://DOUJI.AI/../src/programs/address-lookup-table/state.ts","webpack://DOUJI.AI/../src/utils/makeWebsocketUrl.ts","webpack://DOUJI.AI/../src/connection.ts","webpack://DOUJI.AI/../src/keypair.ts","webpack://DOUJI.AI/../src/programs/address-lookup-table/index.ts","webpack://DOUJI.AI/../src/programs/compute-budget.ts","webpack://DOUJI.AI/../src/programs/ed25519.ts","webpack://DOUJI.AI/../src/utils/secp256k1.ts","webpack://DOUJI.AI/../src/programs/secp256k1.ts","webpack://DOUJI.AI/../src/programs/stake.ts","webpack://DOUJI.AI/../src/programs/vote.ts","webpack://DOUJI.AI/../src/validator-info.ts","webpack://DOUJI.AI/../src/vote-account.ts","webpack://DOUJI.AI/../src/solana-wallet.ts","webpack://DOUJI.AI/./node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// @ts-ignore\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n  var _super = _createSuper(CommonClient);\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n    var _a$autoconnect = _a.autoconnect,\n      autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n      _a$reconnect = _a.reconnect,\n      reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n      _a$reconnect_interval = _a.reconnect_interval,\n      reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n      _a$max_reconnects = _a.max_reconnects,\n      max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n      rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n        var rpc_id = _this2.generate_request_id(method, params);\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n              case 2:\n                resp = _context.sent;\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new Error(\"authentication failed\");\n              case 5:\n                return _context.abrupt(\"return\", resp);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n              case 3:\n                result = _context3.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n              case 6:\n                return _context3.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n              case 3:\n                result = _context4.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n              case 6:\n                return _context4.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n        _this4.emit(\"open\");\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        }\n        // check if any listeners are attached and forward event\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else\n            // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            }\n          // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n          return;\n        }\n        // reject early since server's response is invalid\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n          reason = _ref2.reason;\n        if (_this4.ready)\n          // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n  var _super = _createSuper(WebSocketBrowserImpl);\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw new Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,"/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n",null,null,null,null,null,"import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { Auth, LoginOptions, UserInfo, rpcUrl } from '@particle-network/auth';\nimport { Connection, ConnectionConfig, PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\nimport { EventEmitter } from 'events';\nimport { ISolanaWallet } from './types';\nimport { getVersion } from './utils';\n\nexport class SolanaWallet implements ISolanaWallet {\n    public readonly isParticleNetwork = true;\n\n    name = 'Particle';\n    url = 'https://particle.network';\n    icon = 'https://static.particle.network/wallet-icons/Particle.png';\n\n    private _publicKey: PublicKey | null;\n\n    private _connecting: boolean;\n\n    private events = new EventEmitter();\n\n    constructor(private auth: Auth) {\n        this.auth = auth;\n        this._connecting = false;\n\n        const userInfo = this.auth.getUserInfo();\n        if (userInfo) {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n            } else {\n                this._publicKey = null;\n            }\n        } else {\n            this._publicKey = null;\n        }\n\n        this.auth.on('connect', (userInfo: UserInfo) => {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                this.events.emit('connect', this._publicKey);\n            }\n        });\n        this.auth.on('disconnect', () => {\n            this._publicKey = null;\n            this.events.emit('disconnect');\n        });\n        if (typeof window !== 'undefined' && window.particle) {\n            window.particle.solanaWallet = this;\n        }\n    }\n\n    get version() {\n        return getVersion();\n    }\n\n    on(event: string, listener: any): void {\n        this.events.on(event, listener);\n    }\n\n    once(event: string, listener: any): void {\n        this.events.once(event, listener);\n    }\n\n    off(event: string, listener: any): void {\n        this.events.off(event, listener);\n    }\n\n    removeListener(event: string, listener: any): void {\n        this.events.removeListener(event, listener);\n    }\n\n    get connecting(): boolean {\n        return this._connecting;\n    }\n\n    get connected(): boolean {\n        return this._publicKey !== null;\n    }\n\n    get publicKey(): PublicKey | null {\n        return this._publicKey;\n    }\n\n    public async connect(config?: LoginOptions): Promise<void> {\n        try {\n            this._connecting = true;\n            let wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            }\n            await this.auth.login(config);\n            wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            } else {\n                return Promise.reject('wallet create failed');\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        } finally {\n            this._connecting = false;\n        }\n    }\n\n    public async disconnect(): Promise<void> {\n        await this.auth.logout();\n        this._publicKey = null;\n        return Promise.resolve();\n    }\n\n    public async signTransaction(transaction: Transaction): Promise<Transaction> {\n        const signature = await this.auth.sign(\n            'signTransaction',\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n        return Transaction.from(Buffer.from(signature, 'base64'));\n    }\n\n    public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n        const signatures = await this.auth.signAllTransactions(\n            transactions.map((tx) =>\n                bs58.encode(tx.serialize({ requireAllSignatures: false, verifySignatures: false }))\n            )\n        );\n        return signatures.map((signed: string) => Transaction.from(Buffer.from(signed, 'base64')));\n    }\n\n    public async signAndSendTransaction(transaction: Transaction): Promise<string> {\n        return this.auth.sendTransaction(\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n    }\n\n    public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        const signature = await this.auth.sign('signMessage', bs58.encode(message));\n        return Buffer.from(signature, 'base64');\n    }\n\n    public getConnection(config?: ConnectionConfig): Connection {\n        const url = `${rpcUrl()}/solana`;\n        return new Connection(\n            `${url}?chainId=${this.auth.getChainId()}&projectUuid=${this.auth.config.projectId}&projectKey=${\n                this.auth.config.clientKey\n            }`,\n            {\n                commitment: config?.commitment,\n                wsEndpoint: config?.wsEndpoint,\n                httpHeaders: {\n                    Authorization: this.auth.basicCredentials(),\n                },\n                fetch: config?.fetch,\n                fetchMiddleware: config?.fetchMiddleware,\n                disableRetryOnRateLimit: config?.disableRetryOnRateLimit,\n                confirmTransactionInitialTimeout: config?.confirmTransactionInitialTimeout,\n            }\n        );\n    }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["require","buffer_1","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","call","Error","layout_","boundConstructor_","defineProperty","value","encode","writable","decode","ExternalLayout","isCount","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","_Buffer","base","ALPHABET","BASE_MAP","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","source","isBuffer","zeroes","pbegin","pend","size","b58","carry","it1","it2","str","repeat","decodeUnsafe","alloc","psz","b256","it3","it4","vch","allocUnsafe","fill","string","module","toBigIntLE","buf","reversed","reverse","hex","BigInt","toBigIntBE","toBufferLE","num","width","padStart","toBufferBE","__createBinding","this","o","m","k","k2","enumerable","get","__setModuleDefault","__decorate","decorators","target","key","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","result","__importDefault","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","ResolvedTextDecoder","TextDecoder","textDecoder","fatal","default","INITIAL_LENGTH","message","super","fieldPath","originalMessage","addToFieldPath","fieldName","splice","join","maybeResize","concat","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","subarray","writeString","writeFixedArray","array","writeArray","fn","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","args","apply","code","indexOf","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","len","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","schema","fieldType","writer","item","kind","type","forEach","val","serializeStruct","error","obj","borshSerialize","structSchema","map","field","Writer","deserializeField","reader","arr","option","Map","set","deserializeStruct","classType","borshDeserialize","fieldValue","Reader","basex","uuid","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","request","method","params","id","callback","self","isBatch","isRaw","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","isError","res","isNotError","filter","jsonrpc","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","NewTarget","construct","sham","Proxy","valueOf","__rest","s","t","p","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","address","_a","generate_request_id","_a$autoconnect","autoconnect","_a$reconnect","reconnect","_a$reconnect_interval","reconnect_interval","_a$max_reconnects","max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","socket","timeout","ws_opts","_this2","Promise","resolve","reject","send","promise","setTimeout","_login","mark","_callee","resp","wrap","_context","prev","next","sent","abrupt","stop","login","_x","_listMethods","_callee2","_context2","listMethods","_this3","_subscribe","_callee3","event","_context3","subscribe","_x2","_unsubscribe","_callee4","_context4","unsubscribe","_x3","data","close","_this4","clearTimeout","addEventListener","emit","_ref","ArrayBuffer","notification","listeners","keys","then","_ref2","reason","EventEmitter","_default","WebSocketBrowserImpl","protocols","window","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","listener","_assertThisInitialized","ReferenceError","asyncGeneratorStep","gen","_next","_throw","arg","info","done","_asyncToGenerator","_classCallCheck","instance","Constructor","toPropertyKey","_defineProperties","props","descriptor","configurable","_createClass","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","_typeof","assertThisInitialized","_possibleConstructorReturn","_regeneratorRuntime","n","Symbol","a","iterator","asyncIterator","u","toStringTag","define","Generator","Context","makeInvokeMethod","tryCatch","h","l","f","y","GeneratorFunction","GeneratorFunctionPrototype","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","_sent","dispatchException","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","awrap","async","pop","rval","handle","complete","finish","delegateYield","_setPrototypeOf","_toPrimitive","input","hint","prim","toPrimitive","_toPropertyKey","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","number","isSafeInteger","bytes","lengths","includes","hash","outputLen","blockLen","exists","checkFinished","destroyed","finished","output","out","min","crypto","u8a","u32","Uint32Array","byteLength","createView","DataView","rotr","isLE","utf8ToBytes","TextEncoder","toBytes","concatBytes","arrays","pad","Hash","clone","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","setBigUint64","view","_32n","_u32_max","wh","wl","setUint32","SHA2","padOffset","pos","take","process","dataView","roundClean","digestInto","oview","outLen","state","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","_1n","_2n","hexes","_","bytesToHex","hexToNumber","hexToBytes","hexByte","byte","parseInt","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","reseed","seed","sl","genUntil","pred","validatorFns","bigint","function","boolean","stringOrUint8Array","object","Fp","isValid","validateObject","validators","optValidators","checkField","isOptional","checkVal","entries","_0n","_3n","_4n","_5n","_8n","power","modulo","pow2","invert","q","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","root","eql","sqr","Q1div2","neg","ONE","mul","ZERO","t2","ge","FpSqrt","c1","n2","nv","sub","isNegativeLE","FIELD_FIELDS","validateField","initial","ORDER","MASK","BYTES","BITS","opts","FpPow","FpInvertBatch","nums","lastMultiplied","is0","inverted","inv","reduceRight","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","bitLen","redef","sqrtP","freeze","isOdd","lhs","rhs","div","sqrN","addN","subN","mulN","sqrt","invertBatch","cmov","fromBytes","FpSqrtEven","elm","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","wNAF","constTimeNegate","condition","negate","W","windows","windowSize","unsafeLadder","double","precomputeWindow","points","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","Gx","Gy","VERIFY_DEFAULT","zip215","validateOpts","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","twistedEdwards","curveDef","CURVE","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","toInv","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","msgs","sign","R","verifyOpts","verify","sig","publicKey","SB","RkA","utils","randomPrivateKey","precompute","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","ELL2_C1","Chi","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","W2","s0","s1","sigma1","sigma0","sha256","StructError","failure","failures","cached","rest","path","_cached","isIterable","isObject","print","shiftIterator","toFailure","struct","branch","refinement","toFailures","run","coerce","coercer","valid","validator","ts","Set","refiner","Struct","assert","is","validate","tuples","tuple","any","Element","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","Structs","first","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","posOut","state32","keccak","writeInto","bufferOut","xofInto","xof","keccak_256","HMAC","_key","assertHash","iHash","oHash","assertExists","assertBytes","hmac","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","b2n","h2b","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","shl","rhl","rl","weierstrassPoints","_c","_isCompressed","tail","weierstrassEquation","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","privateKey","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","bits2int","bits2int_modN","lowS","weierstrass","compressedLen","uncompressedLen","isValidFieldElement","invN","cat","isYOdd","isHeadOdd","numToNByteStr","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","isProbPub","getSharedSecret","privateA","publicB","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","drbg","signature","sg","_sig","derError","getHash","createCurve","defHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","b1","a2","POW_2_128","c2","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","properties","SOLANA_SCHEMA","decodeUnchecked","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","uniquePublicKeyCounter","_Symbol$toStringTag","PublicKey","decoded","bs58","BN","unique","eq","toBase58","toJSON","toArrayLike","zeroPad","createWithSeed","fromPublicKey","programId","publicKeyBytes","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","findProgramAddress","pubkeyData","pubkey","_class","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","authorized","lockup","voteInit","voteAuthorizeWithSeedArgs","getAlloc","getItemAlloc","decodeLength","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","accountKeys","recentBlockhash","indexToProgramIds","account","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","blob","bigIntLayout","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","currentSlot","getSlot","slot","objToString","objKeys","isArrayProp","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","fetchImpl","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","url","rpc","createRpc","underlyingSocket","readyState","notify","decodeData","typeIndex","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitmentOrConfig","wsEndpoint","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify$1","unsafeRes","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","clientSubscriptionId","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","ecdsaSign","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_class2","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","website","details","keybaseUsername","packages","init_package","__toCommonJS","package_exports","SolanaWallet","auth","isParticleNetwork","icon","events","_connecting","userInfo","getUserInfo","wallet","wallets","w","chain_name","public_address","_publicKey","userInfo2","particle","solanaWallet","once","off","removeListener","connecting","connected","__async","getWallet","disconnect","logout","signTransaction","Buffer2","signAllTransactions","tx","signed","signAndSendTransaction","signMessage","getConnection","rpcUrl","getChainId","projectId","clientKey","Authorization","basicCredentials","ToDictionary","stringToCodePoints","codePointsToString","code_points","cp","fromCharCode","end_of_stream","Stream","tokens","endOfStream","read","prepend","token","decoderError","opt_code_point","Decoder","Encoder","handler","stream","bite","code_point","DEFAULT_ENCODING","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","UTF8Encoder","temp","input_stream","opt_string"],"sourceRoot":""}