{"version":3,"file":"js/513.47d7be9b.js","mappings":"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","sources":["webpack://DOUJI.AI/./src/utils/web3/nft.js"],"sourcesContent":["import nft from '@/assets/abi/nft.json'\r\nimport i18n from '@/i18n'\r\nimport store from '@/store'\r\nimport Vue from 'vue'\r\nimport { checkAccount } from './chain'\r\n\r\nvar nftContract = undefined\r\n\r\n/** 获取NFT合约 */\r\nfunction getNFTContract() {\r\n  const web3 = window.ethereum\r\n  if (!web3) {\r\n    Vue.$toast(i18n.t('common.need_reconnect_wallet'))\r\n    return null\r\n  }\r\n  if (nftContract) {\r\n    return nftContract\r\n  } else {\r\n    nftContract = new web3.eth.Contract(nft.abi, process.env.VUE_APP_NFT)\r\n    return nftContract\r\n  }\r\n}\r\n\r\n/** 创作者铸造NFT */\r\nexport function possessorMint(tokenURI, initAmount, priceTokenIdOrAmount, maxSupply) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const toAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.authorise(tokenURI, initAmount, priceTokenIdOrAmount, maxSupply)\r\n      .send({ from: toAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n\r\n}\r\n\r\n/** 其他用户mint NFT */\r\nexport function userMint(tokenId, count) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const toAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.mint(toAddress, tokenId, count, '0x')\r\n      .send({ from: toAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n\r\n}\r\n\r\n\r\n/** 查询TokenOwner */\r\nexport function tokenOwner(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.tokenOwners(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/**\r\n * nft信息查询\r\n * @param {*} tokenId \r\n * @returns \r\n */\r\nexport function tokensData(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.tokens(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** 获取余额 */\r\nexport function balanceOf(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.balanceOf(userAccount, tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** 获取metaURI */\r\nexport function tokenURI(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.uri(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** update-step1 */\r\nexport function startSetTokenPrice(tokenId, price, availableSupply) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.startSetTokenPrice(tokenId, price, availableSupply)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** update-step2 */\r\nexport function startSetTokenURI(tokenId, url) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.startSetTokenURI(tokenId, url)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n\r\n/** stake NFT */\r\nexport function stakeNft(tokenId, count) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const fromAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.pledgeNft(tokenId, count)\r\n      .send({ from: fromAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n\r\n}\r\n\r\n\r\n/** 取回 NFT */\r\nexport function unStakeNft(tokenId, count) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const fromAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.unPledgeNft(tokenId, count)\r\n      .send({ from: fromAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n\r\n/** 总质押数量 */\r\nexport function totalPledgeCount(tokenId) {\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.pledgeAllBalanceOf(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** 我的质押数量 */\r\nexport function userPledgeCount(tokenId) {\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const fromAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.pledgeBalanceOf(fromAddress, tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n"],"names":["nftContract","undefined","getNFTContract","web3","window","ethereum","eth","Contract","nft","process","Vue","$toast","i18n","t","possessorMint","tokenURI","initAmount","priceTokenIdOrAmount","maxSupply","checkAccount","toAddress","store","state","chain","account","Promise","resolve","reject","methods","authorise","send","from","on","hash","console","log","receipt","error","message","userMint","tokenId","count","mint","tokenOwner","tokenOwners","call","then","res","catch","e","tokensData","tokens","balanceOf","userAccount","uri","startSetTokenPrice","price","availableSupply","startSetTokenURI","url","stakeNft","fromAddress","pledgeNft","unStakeNft","unPledgeNft","totalPledgeCount","pledgeAllBalanceOf","userPledgeCount","pledgeBalanceOf"],"sourceRoot":""}