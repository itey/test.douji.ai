{"version":3,"file":"js/513.6f3be762.js","mappings":"m5fAQIA,OAAcC,EAGlB,SAASC,IACP,MAAMC,EAAOC,OAAOC,SACpB,OAAKF,EAIDH,IAGFA,EAAc,IAAIG,EAAKG,IAAIC,SAASC,EAAAA,EAASC,8CACtCT,IAPPU,EAAAA,WAAIC,OAAOC,EAAAA,EAAKC,EAAE,iCACX,KAQX,CAGO,SAASC,EAAcC,EAAUC,EAAYC,EAAsBC,GACxE,KAAKC,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMoB,EAAYC,EAAAA,EAAMC,MAAMC,MAAMC,QACpC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQC,UAAUd,EAAUC,GAAYc,EAAAA,EAAAA,IAASb,GAAuBC,GACjFa,KAAK,CAAEC,KAAMZ,IACba,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAGR,CAGO,SAASC,EAASC,EAASC,GAChC,KAAKvB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMoB,EAAYC,EAAAA,EAAMC,MAAMC,MAAMC,QACpC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQe,KAAKvB,EAAWqB,EAASC,EAAO,MACjDX,KAAK,CAAEC,KAAMZ,IACba,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAGR,CAGO,SAASK,EAAWH,GACzB,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,OAAKF,EAGE,IAAIyB,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQgB,WAAWH,GAC5BI,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,SAXN,CAaF,CAIO,SAASC,EAAcT,GAC5B,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,OAAKF,EAGE,IAAIyB,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQuB,YAAYV,GAC7BI,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,SAXN,CAaF,CAOO,SAASG,EAAWX,GACzB,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,OAAKF,EAGE,IAAIyB,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQyB,OAAOZ,GACxBI,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,SAXN,CAaF,CAGO,SAASK,EAAUb,GACxB,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQ0B,UAAUC,EAAad,GACxCI,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,GAER,CAGO,SAASlC,EAAS0B,GACvB,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,OAAKF,EAGE,IAAIyB,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQ4B,IAAIf,GACrBI,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,SAXN,CAaF,CAGO,SAASQ,EAAahB,GAC3B,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQ6B,aAAahB,GAC9BV,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAASmB,EAAmBjB,EAASkB,EAAOC,GACjD,KAAKzC,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQ8B,mBAAmBjB,GAASX,EAAAA,EAAAA,IAAS6B,GAAQC,GAC9D7B,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAASsB,EAAiBpB,GAC/B,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQkC,cAAcrB,GAC/BV,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAASwB,EAAiBtB,EAASuB,GACxC,KAAK7C,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQmC,iBAAiBtB,EAASuB,GAC3CjC,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAAS0B,EAAexB,GAC7B,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQsC,YAAYzB,GAC7BV,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAAS4B,EAAY1B,EAAS2B,GACnC,KAAKjD,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQuC,YAClB1B,EACA2B,EAAMC,OACND,EAAME,KACNF,EAAMG,SACNH,EAAMI,WACgB,IAArBJ,EAAMK,cAAoBC,QAAQ,GACnCN,EAAMO,YAEL5C,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAASqC,EAAUnC,GACxB,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQiD,OAAOpC,GACxBV,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAASuC,EAAgBrC,EAAS2B,GAEvC,GADAjC,QAAQC,IAAIgC,KACPjD,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQkD,gBAClBrC,EACA2B,EAAMW,OACNX,EAAMY,cACNZ,EAAMa,aACNb,EAAMc,WACNd,EAAMe,eACNf,EAAMgB,gBAELrD,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAAS8C,EAAc5C,GAC5B,KAAKtB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQ0D,WAAW7C,GAC5BV,KAAK,CAAEC,KAAMuB,IACbtB,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAGO,SAASgD,EAAcC,GAC5B,MAAMxF,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAMuD,EAAclC,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQ6D,YAAYD,EAAQjC,GACrCV,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,GAER,CAIO,SAASyC,EAASjD,EAASC,GAChC,KAAKvB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAM2F,EAActE,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQgE,UAAUnD,EAASC,GACpCX,KAAK,CAAEC,KAAM2D,IACb1D,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAGR,CAIO,SAASsD,EAAWpD,EAASC,GAClC,KAAKvB,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAM2F,EAActE,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQkE,YAAYrD,EAASC,GACtCX,KAAK,CAAEC,KAAM2D,IACb1D,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,CAIO,SAASwD,EAAiBtD,GAC/B,MAAMzC,EAAcE,IACpB,GAAKF,EAGL,OAAO,IAAIyB,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQoE,mBAAmBvD,GACpCI,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,GAER,CAGO,SAASgD,EAAgBxD,GAC9B,MAAMzC,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAM2F,EAActE,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQsE,gBAAgBP,EAAalD,GAC9CI,OACAC,MAAKC,IACJrB,EAAQqB,EAAI,IAEbC,OAAMC,IACLtB,EAAOsB,EAAE,GACT,GAER,CAIO,SAASkD,EAAYC,GAC1B,KAAKjF,EAAAA,EAAAA,MACH,OAEF,MAAMnB,EAAcE,IACpB,IAAKF,EACH,OAEF,MAAM2F,EAActE,EAAAA,EAAMC,MAAMC,MAAMC,QACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B3B,EAAY4B,QAAQyE,kBAAkBD,GAAU,GAC7CrE,KAAK,CAAEC,KAAM2D,IACb1D,GAAG,mBAAoBC,IACtBC,QAAQC,IAAI,mBAAoBF,EAAK,IAEtCD,GAAG,WAAYI,IACdX,EAAQW,EAAQ,IAEjBJ,GAAG,SAAUK,IACZX,EAAOW,EAAMC,QAAQ,GACrB,GAER,C","sources":["webpack://DOUJI.AI/./src/utils/web3/nft.js"],"sourcesContent":["import nft from '@/assets/abi/nft.json'\r\nimport i18n from '@/i18n'\r\nimport store from '@/store'\r\nimport Vue from 'vue'\r\nimport { mbdToWei } from '../common'\r\nimport { checkAccount } from './chain'\r\n\r\n\r\nvar nftContract = undefined\r\n\r\n/** 获取NFT合约 */\r\nfunction getNFTContract() {\r\n  const web3 = window.ethereum\r\n  if (!web3) {\r\n    Vue.$toast(i18n.t('common.need_reconnect_wallet'))\r\n    return null\r\n  }\r\n  if (nftContract) {\r\n    return nftContract\r\n  } else {\r\n    nftContract = new web3.eth.Contract(nft.abi, process.env.VUE_APP_NFT)\r\n    return nftContract\r\n  }\r\n}\r\n\r\n/** 创作者铸造NFT */\r\nexport function possessorMint(tokenURI, initAmount, priceTokenIdOrAmount, maxSupply) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const toAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.authorise(tokenURI, initAmount, mbdToWei(priceTokenIdOrAmount), maxSupply)\r\n      .send({ from: toAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n\r\n}\r\n\r\n/** 其他用户mint NFT */\r\nexport function userMint(tokenId, count) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const toAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.mint(toAddress, tokenId, count, '0x')\r\n      .send({ from: toAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n\r\n}\r\n\r\n/** 查询DaoRule */\r\nexport function getDaoRule(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.getDaoRule(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n\r\n/** 查询TokenOwner */\r\nexport function getTokenOwner(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.tokenOwners(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/**\r\n * nft信息查询\r\n * @param {*} tokenId \r\n * @returns \r\n */\r\nexport function tokensData(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.tokens(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** 获取余额 */\r\nexport function balanceOf(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.balanceOf(userAccount, tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** 获取metaURI */\r\nexport function tokenURI(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.uri(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** 投票 */\r\nexport function voteByBallot(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.voteByBallot(tokenId)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** update-step1 */\r\nexport function startSetTokenPrice(tokenId, price, availableSupply) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.startSetTokenPrice(tokenId, mbdToWei(price), availableSupply)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** 执行 */\r\nexport function setTokenPriceDao(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.setTokenPrice(tokenId)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** update-step2 */\r\nexport function startSetTokenURI(tokenId, url) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.startSetTokenURI(tokenId, url)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** 执行 */\r\nexport function setTokenURIDao(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.setTokenURI(tokenId)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** update-sale */\r\nexport function startSetNsp(tokenId, param) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.startSetNsp(\r\n      tokenId,\r\n      param.isOpen,\r\n      param.type,\r\n      param.contract,\r\n      param.discounts,\r\n      (param.discountsFee * 100).toFixed(0),\r\n      param.disTokenId\r\n    )\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** 执行 */\r\nexport function setNspDao(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.setNsp(tokenId)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** update-dao */\r\nexport function startSetDaoRule(tokenId, param) {\r\n  console.log(param)\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.startSetDaoRule(\r\n      tokenId,\r\n      param.daoFee,\r\n      param.daoCreatorFee,\r\n      param.daoHolderFee,\r\n      param.mVoteCount,\r\n      param.creatorAddress,\r\n      param.curCreatorFees\r\n    )\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** 执行 */\r\nexport function setDaoRuleDao(tokenId) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.setDaoRule(tokenId)\r\n      .send({ from: userAccount })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n/** 查询是否已经投票 */\r\nexport function isAlreadyVote(voteNo) {\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const userAccount = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.alreadyVote(voteNo, userAccount)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n\r\n/** stake NFT */\r\nexport function stakeNft(tokenId, count) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const fromAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.pledgeNft(tokenId, count)\r\n      .send({ from: fromAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n\r\n}\r\n\r\n\r\n/** 取回 NFT */\r\nexport function unStakeNft(tokenId, count) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const fromAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.unPledgeNft(tokenId, count)\r\n      .send({ from: fromAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n\r\n\r\n/** 总质押数量 */\r\nexport function totalPledgeCount(tokenId) {\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.pledgeAllBalanceOf(tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n/** 我的质押数量 */\r\nexport function userPledgeCount(tokenId) {\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const fromAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.pledgeBalanceOf(fromAddress, tokenId)\r\n      .call()\r\n      .then(res => {\r\n        resolve(res)\r\n      })\r\n      .catch(e => {\r\n        reject(e)\r\n      })\r\n  })\r\n}\r\n\r\n\r\n/** 授权 NFT */\r\nexport function nftApproval(operator) {\r\n  if (!checkAccount()) {\r\n    return\r\n  }\r\n  const nftContract = getNFTContract()\r\n  if (!nftContract) {\r\n    return\r\n  }\r\n  const fromAddress = store.state.chain.account\r\n  return new Promise((resolve, reject) => {\r\n    nftContract.methods.setApprovalForAll(operator, true)\r\n      .send({ from: fromAddress })\r\n      .on('transactionHash', (hash) => {\r\n        console.log('transactionHash:', hash)\r\n      })\r\n      .on('receipt', (receipt) => {\r\n        resolve(receipt)\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error.message)\r\n      })\r\n  })\r\n}\r\n"],"names":["nftContract","undefined","getNFTContract","web3","window","ethereum","eth","Contract","nft","process","Vue","$toast","i18n","t","possessorMint","tokenURI","initAmount","priceTokenIdOrAmount","maxSupply","checkAccount","toAddress","store","state","chain","account","Promise","resolve","reject","methods","authorise","mbdToWei","send","from","on","hash","console","log","receipt","error","message","userMint","tokenId","count","mint","getDaoRule","call","then","res","catch","e","getTokenOwner","tokenOwners","tokensData","tokens","balanceOf","userAccount","uri","voteByBallot","startSetTokenPrice","price","availableSupply","setTokenPriceDao","setTokenPrice","startSetTokenURI","url","setTokenURIDao","setTokenURI","startSetNsp","param","isOpen","type","contract","discounts","discountsFee","toFixed","disTokenId","setNspDao","setNsp","startSetDaoRule","daoFee","daoCreatorFee","daoHolderFee","mVoteCount","creatorAddress","curCreatorFees","setDaoRuleDao","setDaoRule","isAlreadyVote","voteNo","alreadyVote","stakeNft","fromAddress","pledgeNft","unStakeNft","unPledgeNft","totalPledgeCount","pledgeAllBalanceOf","userPledgeCount","pledgeBalanceOf","nftApproval","operator","setApprovalForAll"],"sourceRoot":""}